{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MPPT: A Modern Python Package Template","text":""},{"location":"#about","title":"About","text":"<p>MPPT: A Modern Python Package Template.</p>"},{"location":"#get-started","title":"Get Started","text":"<ol> <li> <p>Use this template repository to create your own project repository by clicking the \"Use this template\" button on GitHub or visiting MPPT.</p> </li> <li> <p>Replace all instances of MPPT, shenxiangzhuang, and other template-specific details with your own information:</p> </li> <li>Project name, author, and GitHub username in all files</li> <li>GitHub repository links in README.md badges and documentation</li> <li>Package name in pyproject.toml and code files</li> <li> <p>Update LICENSE file with your name and year</p> </li> <li> <p>Set up your development environment:</p> </li> </ol> <pre><code># Clone your repository\ngit clone https://github.com/your-username/your-project.git\ncd your-project\n\n# Set up environment using uv\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install development dependencies with uv\nuv sync --all-extras --dev\n\n# Initialize pre-commit hooks\nuv run pre-commit install\n</code></pre> <ol> <li> <p>Start developing your package by modifying the code structure as needed.</p> </li> <li> <p>Run tests to ensure everything is working correctly:</p> </li> </ol> <pre><code>uv run pytest\n</code></pre> <ol> <li>Preview documentation locally:</li> </ol> <pre><code>uv run mkdocs serve\n</code></pre> <p>Then visit http://127.0.0.1:8000 in your browser.</p> <p>For more details on customization options, refer to the documentation.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#070-2025-04-25","title":"[0.7.0] - 2025-04-25","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>add(test): add mutmut pkg by @shenxiangzhuang in #164</li> <li>add(doc): sphinx-immaterial theme by @shenxiangzhuang in #165</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>chore(linting): update Ruff lint configuration by @shenxiangzhuang in #157</li> <li>pkg: remove lock file by @shenxiangzhuang in #158</li> <li>chore: remove dev container by @shenxiangzhuang in #161</li> </ul>"},{"location":"changelog/#cicd","title":"CI/CD","text":"<ul> <li>ci: uv cache prune by @shenxiangzhuang in #150</li> <li>ci(publish): use pypi trusted publisher by @shenxiangzhuang in #162</li> </ul>"},{"location":"changelog/#060-2025-03-06","title":"[0.6.0] - 2025-03-06","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>CI: add mypy and ruff in test workflow</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Linter &amp; formatter: use ruff only, remove isort, black, flake8</li> </ul>"},{"location":"changelog/#050-2025-01-03","title":"[0.5.0] - 2025-01-03","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Use uv to manage the package rather than poetry (#106)</li> <li>Drop the support for Python 3.8 (#110)</li> </ul>"},{"location":"changelog/#040-2024-06-11","title":"[0.4.0] - 2024-06-11","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Poetry: Add commitizen, a conventional commit tool (#71)</li> <li>Add <code>py.typed</code> file to support type hinting (#70)</li> <li>Add sql linter: SQLFluff (#58)</li> <li>Add task runner just (#50)</li> <li>Add package management tool uv (#49)</li> <li>Add Locust as a load testing tool (#39)</li> </ul>"},{"location":"changelog/#030-2023-12-14","title":"[0.3.0] - 2023-12-14","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Add ruff as extra linter and formatter: both in dependency and pre-commit (#31)</li> <li>Add more details about the linters and formatters with the resource from Google SRE book</li> <li>Add doctest (#34)</li> </ul>"},{"location":"changelog/#020-2023-12-01","title":"[0.2.0] - 2023-12-01","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Documentations for all the features (#20)</li> <li>Quick sort implementation for hypothesis testing (#22)</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Change package management from Rye to Poetry (#15, #19)</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Sweep AI App</li> </ul>"},{"location":"changelog/#011-2023-08-15","title":"[0.1.1] - 2023-08-15","text":""},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>reorg this package template</li> </ul>"},{"location":"changelog/#010-2023-08-15","title":"[0.1.0] - 2023-08-15","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>add this package template</li> </ul>"},{"location":"doc/","title":"Documentation","text":""},{"location":"doc/#mkdocsrecommended","title":"Mkdocs(Recommended)","text":"<p>Mkdocs</p> <p>Mkdocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.</p>"},{"location":"doc/#deploy-the-docs-in-github-pages","title":"Deploy the docs in GitHub Pages","text":"<p>Some configuration is needed to deploy the documentation site to GitHub Pages.</p> <p>Give the GitHub Action permission to deploy the docs</p> <ul> <li>In the repository: <code>Setting</code> -&gt; <code>Actions</code> -&gt; <code>Workflow permissions</code>: Select <code>Read and write permissions</code></li> </ul>"},{"location":"doc/#why-mkdocs","title":"Why Mkdocs?","text":""},{"location":"doc/#markdown-is-better-than-restructuredtext","title":"Markdown is better than reStructuredText","text":"<p>Compare to reStructuredText, Markdown is more popular and easier to use.</p>"},{"location":"doc/#material-theme-is-awesome","title":"Material theme is Awesome","text":"<p>Material theme is a theme for Mkdocs, it is a modern theme with a focus on usability and customizability.</p> <p>Material theme: Documentation that simply works</p> <p>Write your documentation in Markdown and create a professional static site in minutes \u2013 searchable, customizable, in 60+ languages, for all devices.</p>"},{"location":"doc/#alternatives","title":"Alternatives","text":""},{"location":"doc/#sphinx","title":"Sphinx","text":"<p>Some old projects still use Sphinx to generate documentation. But reStructuredText is still not easy to use compare to Markdown.</p> <p>Sphinx-Immaterial Theme</p> <p>Sphinx-Immaterial Theme: Adaptation of the popular mkdocs-material material design theme to the sphinx documentation system</p>"},{"location":"linter/","title":"Linter &amp; Formatter &amp; Code Quality Tools","text":"<p>Here we'll introduce the linter, formatter and code quality tools used in the project. We won't introduce the tools in detail, but just give a brief introduction and some examples, which are extracted from the official docs.</p>"},{"location":"linter/#ruff-and-mypyrecommended","title":"Ruff and MyPy(Recommended)","text":"<ul> <li>Linter &amp; Formatter: Ruff</li> <li>Type Checker: MyPy</li> </ul>"},{"location":"linter/#swiss-army-knife-","title":"Swiss Army Knife :-)","text":"PyCon US 2023 - An Overview of the Python Code Tool Landscape 2023 <p>There are a few of them out there. I really didn't understand what I was getting myself into. I had heard of some of them, but many of them have similar names and some I had never heard of, and I found the whole thing really confusing.<sup>1</sup> - Al Sweigart</p> The tools' categories <p>We use the categories defined by Al Sweigart in his blog<sup>1</sup>.</p>"},{"location":"linter/#pep8-pycodestyle","title":"PEP8 -&gt; pycodestyle","text":"pep8 was renamed to pycodestyle <p>pycodestyle is a tool to check your Python code against some of the style conventions in PEP 8... This package used to be called pep8 but was renamed to pycodestyle to reduce confusion. - pycodestyle doc</p> <ul> <li>PEP 8 \u2013 Style Guide for Python Code</li> <li>pycodestyle (formerly called pep8) - Python style guide checker</li> </ul> <p>We wouldn't use the pycodestyle package directly</p> <p>We wouldn't use the pycodestyle package directly, but we would use the <code>flake8</code> package which is a wrapper around pycodestyle, and it also includes other tools like <code>pyflakes</code>(static analysis tool) and <code>mccabe</code>(complexity checker).</p>"},{"location":"linter/#isort-style-linter-for-import-statements","title":"Isort: Style Linter for Import Statements","text":"isort your imports, so you don't have to. <p>isort is a Python utility / library to sort imports alphabetically, and automatically separated into sections and by type. It provides a command line utility, Python library and plugins for various editors to quickly sort all your imports. It requires Python 3.7+ to run but supports formatting Python 2 code too. - isort doc</p> <p>The example from isort doc is very clear:</p> <p>Before isort: <pre><code>from my_lib import Object\n\nimport os\n\nfrom my_lib import Object3\n\nfrom my_lib import Object2\n\nimport sys\n\nfrom third_party import lib15, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9, lib10, lib11, lib12, lib13, lib14\n\nimport sys\n\nfrom __future__ import absolute_import\n\nfrom third_party import lib3\n\nprint(\"Hey\")\nprint(\"yo\")\n</code></pre></p> <p>After isort: <pre><code>from __future__ import absolute_import\n\nimport os\nimport sys\n\nfrom third_party import (lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8,\n                         lib9, lib10, lib11, lib12, lib13, lib14, lib15)\n\nfrom my_lib import Object, Object2, Object3\n\nprint(\"Hey\")\nprint(\"yo\")\n</code></pre></p>"},{"location":"linter/#flake8-error-style-linter-complexity-analysis","title":"Flake8: Error &amp; Style Linter, Complexity Analysis","text":"<p>For example, we have a file <code>hello.py</code>:</p> <p>hello.py</p> <pre><code>print ( \"Hello, World\" )\n</code></pre> <p>After running <code>flake8 hello.py</code>, we got the following result:</p> <pre><code>hello.py:1:6: E211 whitespace before '('\nhello.py:1:8: E201 whitespace after '('\nhello.py:1:23: E202 whitespace before ')'\nhello.py:1:25: W292 no newline at end of file\n</code></pre> <p>Break code style is easy in Python</p> <p>We got four code style mistakes in a one line hello world code.</p> <p>We can see that the flake8 only check the code style, but not fix it. Later, we'll show how to use <code>black</code> to fix the code style automatically.</p>"},{"location":"linter/#black-code-formatter","title":"Black: Code Formatter","text":"<p>Black</p> <p>Black is a PEP 8 compliant opinionated formatter with its own style.</p> <p>Use black is simple, just run <code>black .</code> in the project root directory. We can also use black on single file, just run <code>black hello.py</code>.</p> <p>With the file <code>hello.py</code>:</p> <p>hello.py</p> <pre><code>print ( \"Hello, World\" )\n</code></pre> <p>After running <code>black hello.py</code>, the code style is fixed:</p> <pre><code>print(\"Hello, World\")\n</code></pre> <p>Meantime, black also give us a statistics log:</p> <pre><code>reformatted hello.py\n\nAll done! \u2728 \ud83c\udf70 \u2728\n1 file reformatted, N files left unchanged.\n</code></pre>"},{"location":"linter/#ruff-linter-formatter","title":"Ruff: Linter &amp; Formatter","text":"<p>As just mentioned before, many people recommend to use <code>Ruff</code>, because it's a very cool tool.</p> <ul> <li>It's VERY fast.</li> </ul>  ![](https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg#only-light)"},{"location":"linter/#mypy-type-checker","title":"Mypy: Type Checker","text":"<p>We use an example from official docs of mypy.</p> <p>greeting</p> Without type hintWith type hint <p>A function without type annotations is considered to be dynamically typed by mypy:</p> <p><pre><code>def greeting(name):\n    return 'Hello ' + name\n\ngreeting(123)\ngreeting(b\"Alice\")\n</code></pre> By default, mypy will not type check dynamically typed functions. This means that with a few exceptions, mypy will not report any errors with regular unannotated Python.</p> <p><pre><code>def greeting(name: str) -&gt; str:\n    return 'Hello ' + name\n\ngreeting(3)\n</code></pre> This function is now statically typed: mypy will use the provided type hints to detect incorrect use of the greeting function and incorrect use of variables within the greeting function.</p> <p>After run <code>mypy hello.py</code>, we got the following result:</p> <pre><code>hello.py:5: error: Argument 1 to \"greeting\" has incompatible type \"int\"; expected \"str\"  [arg-type]\nFound 1 error in 1 file (checked 1 source file)\n</code></pre>"},{"location":"linter/#pre-commit","title":"Pre-commit","text":"<p>Pre-commit can be treated as a linter manager, it can manage the linters in the project and run them in a batch.</p> <p>Pre-commit run result</p> ConfigRun result <pre><code>repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n      - id: check-toml\n      - id: check-yaml\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n        exclude: .+\\.csv\n      - id: mixed-line-ending\n        args: [--fix=lf]\n  - repo: https://github.com/psf/black\n    rev: 23.11.0\n    hooks:\n      - id: black\n  - repo: https://github.com/pycqa/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n        args: [\"--profile\", \"black\"]\n  - repo: https://github.com/pycqa/flake8\n    rev: 6.1.0\n    hooks:\n      - id: flake8\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.7.1  # Use the sha / tag you want to point at\n    hooks:\n      - id: mypy\n        args: [--strict, --ignore-missing-imports]\n</code></pre> <pre><code>check toml...............................................................Passed\ncheck yaml...............................................................Passed\nfix end of files.........................................................Passed\ntrim trailing whitespace.................................................Passed\nmixed line ending........................................................Passed\nblack....................................................................Passed\nisort....................................................................Passed\nflake8...................................................................Passed\nmypy.....................................................................Passed\n</code></pre> Pre-commit quick start (with Poetry) <ul> <li>Fellow the <code>Quick start</code> in https://pre-commit.com/</li> <li>Run <code>poetry add pre-commit</code> to install <code>pre-commit</code> into the project</li> <li>Run <code>pre-commit install</code> to install the hooks</li> <li>Run <code>poetry shell</code> into the created python venv environment</li> <li>Run <code>pre-commit run -a</code> to check all the files in the project</li> </ul>"},{"location":"linter/#sonarlint","title":"SonarLint","text":"<p>SonarLint</p>"},{"location":"linter/#sqlfluff","title":"SQLFluff","text":"<p>SQLFluff is a linter for SQL code.</p> <p>SQLFluff</p> <p>SQLFluff is an open source, dialect-flexible and configurable SQL linter. Designed with ELT applications in mind, SQLFluff also works with Jinja templating and dbt. SQLFluff will auto-fix most linting errors, allowing you to focus your time on what matters. - SQLFluff doc</p> <ol> <li> <p>Python Linter Comparison 2022 \u21a9\u21a9</p> </li> </ol>"},{"location":"miscellaneous/","title":"Miscellaneous","text":""},{"location":"miscellaneous/#conventional-commits","title":"Conventional Commits","text":"<p>Conventional Commits</p>"},{"location":"miscellaneous/#change-log","title":"Change Log","text":"<p>Keep a Changelog</p> <p>Tools</p> <ul> <li>git-cliff: A highly customizable changelog generator \u26f0\ufe0f</li> </ul>"},{"location":"miscellaneous/#versioning","title":"Versioning","text":"<p>Semantic Versioning</p>"},{"location":"miscellaneous/#license","title":"License","text":"<p>Choose an open source license</p>"},{"location":"miscellaneous/#badge","title":"Badge","text":"<p>Shields.io</p>"},{"location":"miscellaneous/#contributing","title":"Contributing","text":"<p>Contributing to Open Source on GitHub</p>"},{"location":"miscellaneous/#ai-reviewer","title":"AI Reviewer","text":"<p>Tools</p> <ul> <li>CodeRabbit: Cut Code Review Time &amp; Bugs in Half</li> </ul>"},{"location":"package/","title":"Package Management","text":"![](https://imgs.xkcd.com/comics/python_environment.png)"},{"location":"package/#why-what-and-how","title":"Why, What and How","text":"<p>Most of the illustration is excerpted from Software Engineering from Google<sup>1</sup>.</p>"},{"location":"package/#why","title":"Why","text":"<p>To be honest, it is almost impossible to avoid importing dependencies in our projects. Nowadays, Open Source Software (OSS) provides us with many useful libraries/packages/dependencies, which can save us time and let us only focus on business logic.</p>"},{"location":"package/#what","title":"What","text":"<p>Most challenging problems in software engineering</p> <ul> <li> <p>Dependency management\u2014the management of networks of libraries, packages, and   dependencies that we don't control\u2014is one of the least understood and most   challenging problems in software engineering.</p> </li> <li> <p>The trick isn't just finding     a way to manage one dependency\u2014the trick is how to manage a network of     dependencies and their changes over time.</p> </li> </ul> <ul> <li>Conflicting Requirements and Diamond Dependencies</li> </ul>  ![](image/diamond.png){: style=\"height:200px;width:300px\"}  <p>Diamond Dependencies Example</p> <p>In this simplified model, libbase is used by both liba and libb , and liba and libb are both used by a higher-level component libuser . If libbase ever introduces an incompatible change, there is a chance that liba and libb , as products of separate organizations, don't update simultaneously. If liba depends on the new libbase version and libb depends on the old version, there\u2019s no general way for libuser (aka your code) to put everything together.</p>"},{"location":"package/#how","title":"How","text":""},{"location":"package/#static-dependency","title":"Static Dependency","text":"<p>The simplest way to ensure stable dependencies is to never change them: no API changes, no behavioral changes, nothing.</p> False over a long enough time period <p>The downside to this model is that, over a long enough time period, it is false, and there isn't a clear indication of exactly how long you can pretend that it is legitimate. We don\u2019t have long-term early warning systems for security bugs or other critical issues that might force you to upgrade a dependency\u2014and because of chains of dependencies, a single upgrade can in theory become a forced update to your entire dependency network.</p> <p><code>requirements.txt</code> with <code>==</code></p> <p>If you use <code>==</code>(or don't have a version specification at all) in <code>requirements.txt</code>, you are actrully using the Static Dependency Model.</p>"},{"location":"package/#semantic-versioning","title":"Semantic Versioning","text":"<p>The de facto standard</p> <p>The de facto standard for \u201chow do we manage a network of dependencies today?\u201d is semantic versioning (SemVer). 6 SemVer is the nearly ubiquitous practice of repre\u2010 senting a version number for some dependency (especially libraries) using three decimal-separated integers, such as 2.4.72 or 1.1.4.</p> <p>With the SemVer separation of major/minor/patch versions, the assumption is that a version requirement can generally be expressed as \u201canything newer than,\u201d barring API-incompatible changes (major version changes).</p> Two another methods in the SRE book <p>The are two another dependencies management methods in the book, named with \"Bundled Distribution Models\" and \"Live at Head\". They have little relation to the topic here, so we wouldn't expand them here.</p>"},{"location":"package/#uvrecommended","title":"uv(Recommended)","text":"<p>uv is a VERY fast Python package installer and resolver. It speeds up the dependency resolution &amp; installation process a lot.</p> <p>uv</p> <p>uv now is in rapid development and is not yet production ready. So we recommend you to use Poetry for now. But uv is a promising package manager which will be the game changer in the future, IMHO. So keep an eye on it and try it if you can!</p>"},{"location":"package/#alternatives","title":"Alternatives","text":"Comparison of Python package managers <ul> <li>Python has too many package managers</li> </ul>"},{"location":"package/#poetry","title":"Poetry","text":"<p>Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on, and it will manage (install/update) them for you.</p> <p>Poetry</p> <p>Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you. Poetry offers a lockfile to ensure repeatable installs, and can build your project for distribution.</p> <p>Set the pypi token <code>PYPI_API_TOKEN</code></p> <ul> <li>Login your pypi account: https://pypi.org/manage/account/</li> <li>In pypi account <code>Acount Setting</code> -&gt; <code>API tokens</code>: Select <code>Add API token</code> to generate the api token and COPY it!</li> <li>In the GitHub repository: <code>Setting</code> -&gt; <code>Environments</code>: Select <code>New environments</code> and create an environment named <code>publish</code></li> <li>In the <code>publish</code> environment add a secrets named with <code>PYPI_API_TOKEN</code> and set the value with the token</li> </ul>"},{"location":"package/#pixi","title":"pixi","text":"<p>pixi is a cross-platform, multi-language package manager and workflow tool built on the foundation of the conda ecosystem.</p>"},{"location":"package/#pdm","title":"PDM","text":"<p>PDM is a modern Python package manager with PEP 582 support.</p> <p>PDM</p> <p>PDM, as described, is a modern Python package and dependency manager supporting the latest PEP standards. But it is more than a package manager. It boosts your development workflow in various aspects. The most significant benefit is it installs and manages packages in a similar way to npm that doesn't need to create a virtualenv at all!</p>"},{"location":"package/#ryeuse-uv-instead","title":"Rye(Use Uv instead)","text":"<p>Rye: An Experimental Package Management Solution for Python.</p> <p>uv: Python packaging in Rust</p> <p>We saw this as a rare opportunity to team up, and to avoid fragmenting the Python ecosystem. As such, in collaboration with Armin, we're excited to be taking over Rye. Our goal is to evolve uv into a production-ready \"Cargo for Python\", and to provide a smooth migration path from Rye to uv when the time is right.</p> <ol> <li> <p>T. Winters, T. Manshreck, and H. Wright, Software engineering at google: Lessons learned from programming over time. O'Reilly Media, 2020.\u00a0\u21a9</p> </li> </ol>"},{"location":"task/","title":"Task runner","text":""},{"location":"task/#makefile","title":"Make[file]","text":"<p>Makefile</p> <p>Makefile is a tool which controls the generation of executables and other non-source files of a program from the program's source files.</p> <p>We can use it to run some commands concisely: <pre><code>run_doc_server:\n    mkdocs serve\n\nrun_local_gunicorn:\n    gunicorn package.app.main:app --worker-class uvicorn.workers.UvicornWorker\n</code></pre></p>"},{"location":"task/#taskfile","title":"Task[file]","text":"<p>Taskfile</p> <p>Task is a task runner / build tool that aims to be simpler and easier to use than, for example, GNU Make.</p> <pre><code>version: '3'\n\ntasks:\n  run:\n    cmds:\n      - streamlit run home.py\n  build:\n    cmds:\n      - bash docker_build.sh\n</code></pre>"},{"location":"task/#poetry-scripts","title":"Poetry <code>scripts</code>","text":"<p>Poetry <code>scripts</code></p> <p>The <code>scripts</code> section of the <code>pyproject.toml</code> file allows you to define commands that can be executed with <code>poetry run</code>.</p> <pre><code>[tool.poetry.scripts]\nmy_package_cli = 'my_package.console:run'\n</code></pre>"},{"location":"task/#duty","title":"Duty","text":"<p>Duty</p> <p>pawamoy/duty is a simple task runner. Which is inspired by Invoke.</p> <p></p>"},{"location":"task/#typer","title":"Typer","text":"<p>Typer</p> <p>tiangolo/typer is a library for building CLI applications that users will love using and developers will love creating. Based on Python 3.6+ type hints.</p> <pre><code>$ python main.py --help\n\n Usage: main.py [OPTIONS] COMMAND [ARGS]...\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --install-completion          Install completion  \u2502\n\u2502                               for the current     \u2502\n\u2502                               shell.              \u2502\n\u2502 --show-completion             Show completion for \u2502\n\u2502                               the current shell,  \u2502\n\u2502                               to copy it or       \u2502\n\u2502                               customize the       \u2502\n\u2502                               installation.       \u2502\n\u2502 --help                        Show this message   \u2502\n\u2502                               and exit.           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 goodbye                                           \u2502\n\u2502 hello                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n// When you create a package you get \u2728 auto-completion \u2728 for free, installed with --install-completion\n\n// You have 2 subcommands (the 2 functions): goodbye and hello\n</code></pre>"},{"location":"task/#just","title":"Just","text":"<p>Just</p> <p>casey/just is a handy way to save and run project-specific commands.</p> <p></p>"},{"location":"test/","title":"Testing","text":""},{"location":"test/#pytest","title":"Pytest","text":"<p>Pytest is a testing framework for Python. It is a mature full-featured Python testing tool.</p>"},{"location":"test/#doctest","title":"Doctest","text":"<p>Python supports doctest, which is very convenient for testing small code snippets within docstrings. And, it's make the usage of the code more clear.</p> <pre><code>def add(a, b):\n    \"\"\"\n    &gt;&gt;&gt; add(1, 2)\n    3\n    &gt;&gt;&gt; add(2, 3)\n    5\n    \"\"\"\n    return a + b\n</code></pre> <p>Run doctest</p> Run doctest for a specific moduleRun doctest for all the modulesRun with pytest <pre><code>python -m doctest -v mppt/hello.py\n</code></pre> <pre><code>python -m doctest -v mppt/*.py\n</code></pre> <pre><code>pytest --doctest-modules\n</code></pre>"},{"location":"test/#hypothesis","title":"Hypothesis","text":"<p>Hypothesis is a library for property based testing.</p> <p>We can print the statistics of the hypothesis testing by adding the following command line option:</p> <p>RUN: <code>pytest --hypothesis-show-statistics tests/test_sort.py</code></p> Testing statistics <pre><code>======================== Hypothesis Statistics =========================\ntests/test_sort.py::TestQuickSort::test_integer:\n\n  - during reuse phase (0.00 seconds):\n    - Typical runtimes: &lt; 1ms, of which &lt; 1ms in data generation\n    - 2 passing examples, 0 failing examples, 0 invalid examples\n\n  - during generate phase (0.08 seconds):\n    - Typical runtimes: &lt; 1ms, of which &lt; 1ms in data generation\n    - 98 passing examples, 0 failing examples, 2 invalid examples\n\n  - Stopped because settings.max_examples=100\n\n\ntests/test_sort.py::TestQuickSort::test_float:\n\n  - during reuse phase (0.00 seconds):\n    - Typical runtimes: &lt; 1ms, of which &lt; 1ms in data generation\n    - 2 passing examples, 0 failing examples, 0 invalid examples\n\n  - during generate phase (0.05 seconds):\n    - Typical runtimes: &lt; 1ms, of which &lt; 1ms in data generation\n    - 98 passing examples, 0 failing examples, 11 invalid examples\n\n  - Stopped because settings.max_examples=100\n\n\ntests/test_sort.py::TestQuickSort::test_string:\n\n  - during reuse phase (0.00 seconds):\n    - Typical runtimes: &lt; 1ms, of which &lt; 1ms in data generation\n    - 3 passing examples, 0 failing examples, 0 invalid examples\n\n  - during generate phase (0.40 seconds):\n    - Typical runtimes: ~ 0-2 ms, of which ~ 0-2 ms in data generation\n    - 297 passing examples, 0 failing examples, 4 invalid examples\n\n  - Stopped because settings.max_examples=300\n</code></pre>"},{"location":"test/#mutmut","title":"Mutmut","text":"<p>Mutmut is a mutation testing tool for Python.</p>"},{"location":"test/#locust","title":"Locust","text":"<p>Locust is an easy-to-use, distributed, user load testing(stress testing) tool.</p>"},{"location":"test/#codecov","title":"Codecov","text":"<p>Codecov is a code coverage tool.</p> <p>Some configurations are needed to use Codecov to generate test coverage report.</p> <p>Set the codecov token <code>CODECOV_TOKEN</code></p> <ul> <li>Login your codecov account with GitHub: https://about.codecov.io/</li> <li>In codecov account, select the repository and you'll see a page named <code>Let's get your repo covered</code>. Just COPY the token here.</li> <li>In the GitHub repository: <code>Setting</code> -&gt; <code>Secrets and variables</code>: Add a <code>Repository secrets</code> named <code>CODECOV_TOKEN</code> and set the value with the token</li> </ul>"}]}